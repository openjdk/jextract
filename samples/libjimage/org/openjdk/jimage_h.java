// Generated by jextract

package org.openjdk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class jimage_h  {

    /* package-private */ jimage_h() {}
    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;
    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;
    public static ValueLayout.OfInt C_INT = JAVA_INT;
    public static ValueLayout.OfLong C_LONG = JAVA_LONG;
    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;
    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;
    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;
    public static int JIMAGE_MAX_PATH() {
        return (int)4096L;
    }
    public static ValueLayout.OfLong jlong = JAVA_LONG;
    public static ValueLayout.OfInt jint = JAVA_INT;
    public static ValueLayout.OfLong JImageLocationRef = JAVA_LONG;
    public static MethodHandle JIMAGE_Open$MH() {
        return RuntimeHelper.requireNonNull(constants$0.JIMAGE_Open$MH,"JIMAGE_Open");
    }
    public static MemoryAddress JIMAGE_Open ( Addressable name,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.JIMAGE_Open$MH, "JIMAGE_Open");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JIMAGE_Close$MH() {
        return RuntimeHelper.requireNonNull(constants$0.JIMAGE_Close$MH,"JIMAGE_Close");
    }
    public static void JIMAGE_Close ( Addressable jimage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.JIMAGE_Close$MH, "JIMAGE_Close");
        try {
            mh$.invokeExact(jimage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JIMAGE_PackageToModule$MH() {
        return RuntimeHelper.requireNonNull(constants$1.JIMAGE_PackageToModule$MH,"JIMAGE_PackageToModule");
    }
    public static MemoryAddress JIMAGE_PackageToModule ( Addressable jimage,  Addressable package_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.JIMAGE_PackageToModule$MH, "JIMAGE_PackageToModule");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(jimage, package_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JIMAGE_FindResource$MH() {
        return RuntimeHelper.requireNonNull(constants$1.JIMAGE_FindResource$MH,"JIMAGE_FindResource");
    }
    public static long JIMAGE_FindResource ( Addressable jimage,  Addressable module_name,  Addressable version,  Addressable name,  Addressable size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.JIMAGE_FindResource$MH, "JIMAGE_FindResource");
        try {
            return (long)mh$.invokeExact(jimage, module_name, version, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JIMAGE_GetResource$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JIMAGE_GetResource$MH,"JIMAGE_GetResource");
    }
    public static long JIMAGE_GetResource ( Addressable jimage,  long location,  Addressable buffer,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.JIMAGE_GetResource$MH, "JIMAGE_GetResource");
        try {
            return (long)mh$.invokeExact(jimage, location, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JIMAGE_ResourceIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JIMAGE_ResourceIterator$MH,"JIMAGE_ResourceIterator");
    }
    public static void JIMAGE_ResourceIterator ( Addressable jimage,  Addressable visitor,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.JIMAGE_ResourceIterator$MH, "JIMAGE_ResourceIterator");
        try {
            mh$.invokeExact(jimage, visitor, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int JIMAGE_NOT_FOUND() {
        return (int)0L;
    }
    public static int JIMAGE_BAD_MAGIC() {
        return (int)-1L;
    }
    public static int JIMAGE_BAD_VERSION() {
        return (int)-2L;
    }
    public static int JIMAGE_CORRUPTED() {
        return (int)-3L;
    }
}


