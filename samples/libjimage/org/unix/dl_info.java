// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class dl_info {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("dli_fname"),
        ADDRESS.withName("dli_fbase"),
        ADDRESS.withName("dli_sname"),
        ADDRESS.withName("dli_saddr")
    ).withName("dl_info");
    public static MemoryLayout $LAYOUT() {
        return dl_info.$struct$LAYOUT;
    }
    static final VarHandle dli_fname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dli_fname"));
    public static VarHandle dli_fname$VH() {
        return dl_info.dli_fname$VH;
    }
    public static MemoryAddress dli_fname$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fname$VH.get(seg);
    }
    public static void dli_fname$set( MemorySegment seg, MemoryAddress x) {
        dl_info.dli_fname$VH.set(seg, x);
    }
    public static MemoryAddress dli_fname$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dli_fname$set(MemorySegment seg, long index, MemoryAddress x) {
        dl_info.dli_fname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dli_fbase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dli_fbase"));
    public static VarHandle dli_fbase$VH() {
        return dl_info.dli_fbase$VH;
    }
    public static MemoryAddress dli_fbase$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fbase$VH.get(seg);
    }
    public static void dli_fbase$set( MemorySegment seg, MemoryAddress x) {
        dl_info.dli_fbase$VH.set(seg, x);
    }
    public static MemoryAddress dli_fbase$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fbase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dli_fbase$set(MemorySegment seg, long index, MemoryAddress x) {
        dl_info.dli_fbase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dli_sname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dli_sname"));
    public static VarHandle dli_sname$VH() {
        return dl_info.dli_sname$VH;
    }
    public static MemoryAddress dli_sname$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_sname$VH.get(seg);
    }
    public static void dli_sname$set( MemorySegment seg, MemoryAddress x) {
        dl_info.dli_sname$VH.set(seg, x);
    }
    public static MemoryAddress dli_sname$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_sname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dli_sname$set(MemorySegment seg, long index, MemoryAddress x) {
        dl_info.dli_sname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dli_saddr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dli_saddr"));
    public static VarHandle dli_saddr$VH() {
        return dl_info.dli_saddr$VH;
    }
    public static MemoryAddress dli_saddr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_saddr$VH.get(seg);
    }
    public static void dli_saddr$set( MemorySegment seg, MemoryAddress x) {
        dl_info.dli_saddr$VH.set(seg, x);
    }
    public static MemoryAddress dli_saddr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_saddr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dli_saddr$set(MemorySegment seg, long index, MemoryAddress x) {
        dl_info.dli_saddr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


