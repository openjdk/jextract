/*
 *  Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License version 2 only, as
 *  published by the Free Software Foundation.  Oracle designates this
 *  particular file as subject to the "Classpath" exception as provided
 *  by Oracle in the LICENSE file that accompanied this code.
 *
 *  This code is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  version 2 for more details (a copy is included in the LICENSE file that
 *  accompanied this code).
 *
 *  You should have received a copy of the GNU General Public License version
 *  2 along with this work; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 *  or visit www.oracle.com if you need additional information or have any
 *  questions.
 */

// Generated by jextract

package org.openjdk.jextract.clang.libclang;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int int_data[4];
 *     void *ptr_data;
 * }
 * }
 */
public class CXToken {

    CXToken() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Index_h.C_INT).withName("int_data"),
        Index_h.C_POINTER.withName("ptr_data")
    ).withName("$anon$4996:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout int_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("int_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static final SequenceLayout int_data$layout() {
        return int_data$LAYOUT;
    }

    private static final long int_data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static final long int_data$offset() {
        return int_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static MemorySegment int_data(MemorySegment struct) {
        return struct.asSlice(int_data$OFFSET, int_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static void int_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, int_data$OFFSET, int_data$LAYOUT.byteSize());
    }

    private static long[] int_data$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static long[] int_data$dimensions() {
        return int_data$DIMS;
    }
    private static final VarHandle int_data$ELEM_HANDLE = int_data$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static int int_data(MemorySegment struct, long index0) {
        return (int)int_data$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int int_data[4]
     * }
     */
    public static void int_data(MemorySegment struct, long index0, int fieldValue) {
        int_data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout ptr_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptr_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptr_data
     * }
     */
    public static final AddressLayout ptr_data$layout() {
        return ptr_data$LAYOUT;
    }

    private static final long ptr_data$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptr_data
     * }
     */
    public static final long ptr_data$offset() {
        return ptr_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptr_data
     * }
     */
    public static MemorySegment ptr_data(MemorySegment struct) {
        return struct.get(ptr_data$LAYOUT, ptr_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptr_data
     * }
     */
    public static void ptr_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ptr_data$LAYOUT, ptr_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

