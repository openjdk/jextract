name: Build and test Jextract

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:

env:
  CLANG_LLVM_VERSION: 13.0.0
  CLANG_LLVM_BASE_URL: "https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/"

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        include:
          - os: ubuntu-20.04
            TARGET: clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04
            ARCHIVE_EXT: "tar.xz"
            LIB_DIR: "lib"
            DEPS_ROOT: /tmp/deps
            TOOLCHAIN_JAVA_HOME: /tmp/deps/jdk-toolchain
          - os: macos-latest
            TARGET: clang+llvm-13.0.0-x86_64-apple-darwin
            ARCHIVE_EXT: "tar.xz"
            LIB_DIR: "lib"
            DEPS_ROOT: /tmp/deps
            TOOLCHAIN_JAVA_HOME: /tmp/deps/jdk-toolchain/jdk-22.jdk/Contents/Home
          - os: windows-latest
            TARGET: LLVM-13.0.0-win64
            ARCHIVE_EXT: "exe"
            LIB_DIR: "bin"
            DEPS_ROOT: C:/tmp/deps
            TOOLCHAIN_JAVA_HOME: C:/tmp/deps/jdk-toolchain/jdk-22

    steps:
    - name: 'Check out repository'
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 1
        
    - name: 'Prepare'
      shell: sh
      run: |
        mkdir -p ./deps/jtreg
        mkdir -p ${{ matrix.DEPS_ROOT }}

    - name: 'Download toolchain JDK'
      id: download_toolchain_jdk
      uses: oracle-actions/setup-java@v1.3.4
      with:
        website: jdk.java.net
        release: 22
        install: false
        
    - name: 'Extract Toolchain JDK (Non Windows)'
      if: ${{ matrix.os != 'windows-latest' }}
      shell: sh
      run: |
        mkdir -p ${{ matrix.DEPS_ROOT}}/jdk-toolchain
        tar --strip-components=1 -xvf ${{ steps.download_toolchain_jdk.outputs.archive }} -C ${{ matrix.DEPS_ROOT}}/jdk-toolchain
        ls -lah ${{ matrix.DEPS_ROOT}}/jdk-toolchain
        ${{ matrix.TOOLCHAIN_JAVA_HOME }}/bin/java --version

    - name: 'Extract Toolchain JDK (Windows)'
      if: ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        New-Item -ItemType Directory ${{ matrix.DEPS_ROOT}}/jdk-toolchain
        7z x ${{ steps.download_toolchain_jdk.outputs.archive }} -o${{ matrix.DEPS_ROOT}}/jdk-toolchain/
        ls ${{ matrix.DEPS_ROOT}}/jdk-toolchain/jdk-22
        ${{ matrix.TOOLCHAIN_JAVA_HOME }}/bin/java --version

    - name: 'Setup Java 17'
      uses: oracle-actions/setup-java@v1.3.4
      with:
        release: 17

    - name: 'Check default Java version'
      shell: sh
      run: |
        java --version
        echo JAVA_HOME=$JAVA_HOME

    - name: 'Get libclang'
      id: get-libclang
      uses: ./.github/actions/get-libclang
      with:
        platform: ${{ matrix.os }}
        base-url: ${{ env.CLANG_LLVM_BASE_URL }}
        target: ${{ matrix.TARGET }}
        archive-ext: ${{ matrix.ARCHIVE_EXT }}
        lib-dir: ${{ matrix.LIB_DIR }}
        path: ${{ matrix.DEPS_ROOT }}/deps/libclang

    - name: 'Build Jextract'
      shell: sh
      run: |
        sh ./gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=${{ steps.get-libclang.outputs.path }} clean verify        

    - name: 'Get JTReg'
      id: get-jtreg
      uses: ./.github/actions/get-jtreg
      with:
        version: 7.3.1+1
        path: ./deps/jtreg

    - name: 'Run tests'
      shell: sh
      run: |
        sh ./gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=${{ steps.get-libclang.outputs.path }} -Pjtreg_home=${{ steps.get-jtreg.outputs.path }} jtreg
