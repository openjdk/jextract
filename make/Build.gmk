include make/Common.gmk

$(eval $(call SetupVariable,PANAMA_JAVA_HOME))
$(eval $(call SetupVariable,LIBCLANG_HOME))
$(eval $(call SetupVariable,LIBCLANG_VERSION,,NO_CHECK))

include make/NativeCompilation.gmk

ifeq ($(PLATFORM_OS), windows)
  JPACKAGE_ARGS := --win-console
else
  JPACKAGE_ARGS :=
endif

ifeq ($(PLATFORM_OS), macosx)
  TAR_SUPPORTS_TRANSFORM := false
else
  TAR_SUPPORTS_TRANSFORM := true
endif

LIBCLANG_LIB_DIR := $(LIBCLANG_HOME)/$(OS_LIB_DIR)
LIBCLANG_INCLUDE_DIR := $(LIBCLANG_HOME)/lib/clang/$(LIBCLANG_VERSION)/include

BUILD_CLASSES_DIR := $(BUILD_DIR)/classes
BUILD_MODULES_DIR := $(BUILD_DIR)/modules
BUILD_TEST_SUPPORT_DIR := $(BUILD_DIR)/support/test

ifeq ($(PLATFORM_OS), macosx)
  BUNDLE_PLATFORM := macos-$(PLATFORM_CPU)
else
  BUNDLE_PLATFORM := $(PLATFORM)
endif

JEXTRACT_BUNDLE_TOP_DIR := $(JEXTRACT_NAME_VERSION)
JEXTRACT_BUNDLE_PREFIX := $(JEXTRACT_NAME_VERSION)-internal+0_$(BUNDLE_PLATFORM)
JEXTRACT_BUNDLE := $(BUILD_DIR)/bundles/$(JEXTRACT_BUNDLE_PREFIX)_bin.tar.gz
JEXTRACT_BUNDLE_TMP_DIR := $(BUILD_DIR)/bundles/tmp/$(JEXTRACT_BUNDLE_TOP_DIR)
JEXTRACT_TESTS_BUNDLE := $(BUILD_DIR)/bundles/$(JEXTRACT_BUNDLE_PREFIX)_bin-tests.tar.gz
JEXTRACT_TEST_JDK_BUNDLE := $(BUILD_DIR)/bundles/$(JEXTRACT_BUNDLE_PREFIX)_bin-testjdk.tar.gz

NATIVE_TEST_SOURCES := $(shell find $(TOPDIR)/test -name "lib*.c")

$(foreach file,$(NATIVE_TEST_SOURCES),$(eval $(call BuildNativeLibrary,$(file),$(JEXTRACT_IMAGE_NATIVE_TEST_DIR),$(BUILD_TEST_SUPPORT_DIR),BUILD_NATIVE_TEST_LIBRARIES)))

$(BUILD_CLASSES_DIR):
	$(MKDIR) -p $(BUILD_CLASSES_DIR)/org/openjdk/jextract/impl
	$(FIXPATH) $(PANAMA_JAVA_HOME)/bin/javac \
	    --release=18 \
	    --add-modules=jdk.incubator.foreign \
	    -d "$(BUILD_CLASSES_DIR)" \
	    src/main/java/module-info.java \
	    src/main/java/org/openjdk/jextract/*.java \
	    src/main/java/org/openjdk/jextract/impl/*.java \
	    src/main/java/org/openjdk/jextract/clang/*.java \
	    src/main/java/org/openjdk/jextract/clang/libclang/*.java
	$(CP) -r src/main/java/META-INF $(BUILD_CLASSES_DIR)
	$(CP) -r src/main/resources/org/openjdk/jextract/impl/resources $(BUILD_CLASSES_DIR)/org/openjdk/jextract/impl

$(BUILD_MODULES_DIR): $(BUILD_CLASSES_DIR)
	$(MKDIR) -p $(BUILD_MODULES_DIR)/org.openjdk.jextract

        # Copy org.openjdk.jextract classes to the right place
	$(CP) -r $(BUILD_CLASSES_DIR)/* $(BUILD_MODULES_DIR)/org.openjdk.jextract

$(JEXTRACT_IMAGE_DIR): $(BUILD_MODULES_DIR)
        # jlink the modules to create a custom runtime image for jextract
	$(FIXPATH) $(PANAMA_JAVA_HOME)/bin/jlink \
	    --output "$(JEXTRACT_IMAGE_DIR)" \
	    --module-path "$(BUILD_MODULES_DIR)" \
	    --add-modules org.openjdk.jextract \
	    --add-modules jdk.compiler \
	    --add-options \"--enable-native-access=org.openjdk.jextract\" \
	    --launcher jextract=org.openjdk.jextract/org.openjdk.jextract.JextractTool

        # Copy libclang library and header files into the jlink'ed image
	$(CP) "$(LIBCLANG_LIB_DIR)/"*clang.* "$(JEXTRACT_IMAGE_DIR)/$(OS_LIB_DIR)"
	$(MKDIR) -p $(JEXTRACT_IMAGE_DIR)/conf/jextract
	$(CP) "$(LIBCLANG_INCLUDE_DIR)/"*.h "$(JEXTRACT_IMAGE_DIR)/conf/jextract/"

$(JEXTRACT_IMAGE_TEST_JDK_DIR): $(JEXTRACT_IMAGE_DIR)
        # jlink the modules to create a custom runtime image for jextract testing
	$(FIXPATH) $(PANAMA_JAVA_HOME)/bin/jlink \
	    -J-Djlink.debug=true \
	    --output "$(JEXTRACT_IMAGE_TEST_JDK_DIR)" \
	    --module-path "$(BUILD_MODULES_DIR):$(PANAMA_JAVA_HOME)/jmods" \
	    --add-modules ALL-MODULE-PATH

        # Copy libclang library and header files into the jlink'ed test image
	$(CP) $(LIBCLANG_LIB_DIR)/*clang.* $(JEXTRACT_IMAGE_TEST_JDK_DIR)/$(OS_LIB_DIR)
	$(MKDIR) -p $(JEXTRACT_IMAGE_TEST_JDK_DIR)/conf/jextract
	$(CP) $(LIBCLANG_INCLUDE_DIR)/*.h $(JEXTRACT_IMAGE_TEST_JDK_DIR)/conf/jextract/


$(JEXTRACT_BUNDLE): $(JEXTRACT_IMAGE_DIR)
	@$(MKDIR) -p $(@D)
ifeq ($(TAR_SUPPORTS_TRANSFORM),true)
	$(TAR) zcf $@ --transform 's|^$(JEXTRACT_NAME)|^$(JEXTRACT_BUNDLE_TOP_DIR)|S' -C $(dir $(JEXTRACT_IMAGE_DIR)) $(notdir $(JEXTRACT_IMAGE_DIR))
else
	$(RM) -r $(JEXTRACT_BUNDLE_TMP_DIR)
	$(MKDIR) -p $(JEXTRACT_BUNDLE_TMP_DIR)
	($(CD) $(JEXTRACT_IMAGE_DIR) && $(TAR) cf - .) | ($(CD) $(JEXTRACT_BUNDLE_TMP_DIR) && $(TAR) xf -)
	$(TAR) zcf $@ -C $(dir $(JEXTRACT_BUNDLE_TMP_DIR)) $(notdir $(JEXTRACT_BUNDLE_TMP_DIR))
endif

$(JEXTRACT_TESTS_BUNDLE): $(BUILD_NATIVE_TEST_LIBRARIES)
	@$(MKDIR) -p $(@D)
	$(TAR) zcf $@ -C $(dir $(JEXTRACT_IMAGE_NATIVE_TEST_DIR)) $(notdir $(JEXTRACT_IMAGE_NATIVE_TEST_DIR))

$(JEXTRACT_TEST_JDK_BUNDLE): $(JEXTRACT_IMAGE_TEST_JDK_DIR)
	@$(MKDIR) -p $(@D)
	$(TAR) zcf $@ -C $(dir $(JEXTRACT_IMAGE_TEST_JDK_DIR)) $(notdir $(JEXTRACT_IMAGE_TEST_JDK_DIR))


compile-java: $(BUILD_CLASSES_DIR)

image: $(JEXTRACT_IMAGE_DIR)

test-image: $(BUILD_NATIVE_TEST_LIBRARIES) $(JEXTRACT_IMAGE_TEST_JDK_DIR)

images: image test-image

bundles: $(JEXTRACT_BUNDLE) $(JEXTRACT_TESTS_BUNDLE) $(JEXTRACT_TEST_JDK_BUNDLE)

.PHONY: compile-java image test-image images bundles
